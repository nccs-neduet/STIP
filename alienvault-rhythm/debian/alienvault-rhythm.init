#!/bin/sh
### BEGIN INIT INFO
# Provides:          alienvault-rhythm
# Required-Start:    $local_fs $syslog $network $remote_fs ossim-agent alienvault-redis-server-otx
# Required-Stop:     $local_fs $syslog $network $remote_fs ossim-agent alienvault-redis-server-otx
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AlienVault Rhythm
# Description:       AlienVault Rhythm is a small correlation engine that matches
#                    IDS events with OTX data.
### END INIT INFO

# General variables
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="AlienVault Rhythm"
USER=avrhythm
GROUP=alienvault
RUNDIR=/var/run/alienvault

AVR_NAME=alienvault-rhythm
AVR_DAEMON=/usr/bin/$AVR_NAME
AVR_DAEMON_ARGS="-D"
AVR_PIDFILE=$RUNDIR/rhythm.pid
AVR_CFGFILE=/etc/alienvault/rhythm/rhythm.cfg

SCRIPTNAME=/etc/init.d/$AVR_NAME

# Exit if the package is not installed
[ -x "$AVR_DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    ### Start Rhythm instance.

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

    # ossim-agent might create matches.log with root permissions
    default_output="/var/log/alienvault/rhythm/matches.log"
    output_log="$default_output"
    if [ -f "$AVR_CFGFILE" ]; then
        output_log=$(grep "file=" "$AVR_CFGFILE"  | sed -e "/^ *#.*$/d" | cut -d'=' -f2 || echo "$default_output")
        if [ -f "$output_log" ]; then
            chown $USER:$GROUP  "$output_log"
            chmod 640 "$output_log"
        fi
    fi

    [ -d "$RUNDIR" ] || mkdir -p -m 770 "$RUNDIR"
    chgrp -R alienvault "$RUNDIR" 

    start-stop-daemon --start --quiet --chuid $USER --group $GROUP --pidfile $AVR_PIDFILE --exec $AVR_DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --chuid $USER --group $GROUP --pidfile $AVR_PIDFILE --exec $AVR_DAEMON -- $AVR_DAEMON_ARGS \
        || return 2

    sleep 2

    if [ -f $AVR_PIDFILE ]; then
        PIDVALUE=$(cat $AVR_PIDFILE)
        for rhythm_pid in $(ps ax | grep $AVR_DAEMON | grep -v grep| awk '{print$1}'); do
            if [ "$rhythm_pid" != "$PIDVALUE" ]; then
                kill -9 $rhythm_pid
            fi
        done
    fi

    return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
    ### Stop Rhythm instance.

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $AVR_PIDFILE --exec $AVR_DAEMON
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    start-stop-daemon --stop --quiet --oknodo --retry=0/10/KILL/5 --exec $AVR_DAEMON
    [ "$?" = 2 ] && return 2

    rm -f $AVR_PIDFILE
    return "$RETVAL"
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$AVR_DAEMON" "$AVR_NAME" && exit 0 || exit $?
        ;;
    force-reload|restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
            ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
