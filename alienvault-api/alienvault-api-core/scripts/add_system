#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  License:
#
#  Copyright (c) 2014 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt

import sys
from optparse import OptionParser, SUPPRESS_HELP

from apimethods.system.system import add_system, add_system_from_ip, add_ha_system
from apimethods.utils import is_valid_ipv4, is_valid_uuid


def parse_args():
    usage = "alienvault-api add_system " \
            "[--system-ip=<system_ip> | --system-id=<system_id>] --password=<root password>"
    parser = OptionParser(usage=usage)

    parser.add_option("-i", "--system-ip", dest="system_ip", type="string", default=None,
                      help="IP address of the remote system")
    parser.add_option("-d", "--system-id", dest="system_id", type="string", default=None,
                      help="System id number of the remote system")
    parser.add_option("-p", "--password", dest="password", type="string", default=None,
                      help="root password of the remote system")
    parser.add_option("--ha", action="store_true", dest="is_ha", default=False,
                      help=SUPPRESS_HELP)

    (options, args) = parser.parse_args()

    if not options.system_ip and not options.system_id:
        print "system_ip or system_id option needed"
        print "Usage: %s" % usage
        exit(-1)

    if options.system_ip and options.system_id:
        print "Only one option accepted: system_ip or system_id"
        print "Usage: %s" % usage
        exit(-1)

    if options.system_ip and not is_valid_ipv4(options.system_ip):
        print "Bad format: system_ip"
        print "Usage: %s" % usage
        exit(-1)

    if options.system_id and not is_valid_uuid(options.system_id):
        print "Bad format: system_id"
        print "Usage: %s" % usage
        exit(-1)

    if not options.password:
        print "password option needed"
        print "Usage: %s" % usage
        exit(-1)

    return (options, args)


def main():
    (options, args) = parse_args()

    print "Adding system..."
    sys.stdout.flush()

    if options.is_ha:
        print "Adding HA system..."
        (success, msg) = add_ha_system(system_ip=options.system_ip,
                                            password=options.password)
    elif options.system_id:
        (success, msg) = add_system(system_id=options.system_id,
                                    password=options.password)
    else:
        (success, msg) = add_system_from_ip(system_ip=options.system_ip,
                                            password=options.password)

    if not success:
        print "Something wrong happened adding the system: %s" % msg
        exit(-1)

    print "System added successfully"
    if options.is_ha:
        print msg
    else:
        print " %s - %s" % (msg['system_id'], msg['hostname'])

    exit(0)


if __name__ == "__main__":
    main()
