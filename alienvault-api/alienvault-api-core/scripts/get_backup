#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  License:
#
#  Copyright (c) 2013 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#

from apimethods.system.backup import get_backup_list
from optparse import OptionParser

import json
import sys
BACKUPS_TYPE = ['configuration']

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-j", "--json", action="store_true",
                      dest="output_json", default=False,
                      help="Print the backups in json format with full information")
    parser.add_option("-t", "--type", dest="backup_type",
                      help="Select backup type")
    (options, args) = parser.parse_args()
    if not options.backup_type or options.backup_type not in BACKUPS_TYPE:
        print >>sys.stderr, "--type not present or bad type passed"
        exit(-1)
    (success, result) = get_backup_list(system_id='local', backup_type=options.backup_type, no_cache=True)
    if not success:
        print "Can't get the current backup list"
        exit(-1)
    if options.output_json:
        print json.dumps(result)
    else:
        for entry in result:
            print "%s" % (entry['file'])
    exit(0)
