#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  License:
#
#  Copyright (c) 2013 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#


import sys
from datetime import datetime
from optparse import OptionParser

from ansiblemethods.server.logger import delete_raw_logs


def logclean():
    parser = OptionParser(usage="%prog [--start YYYY/MM/DD] [--end  YYYY/MM/DD] (--start or --end must be present)",
                          version="%prog 1.0")
    parser.add_option("--start", action="store", dest="start", default=None, help="Start date YYYY/MM/DD")
    parser.add_option("--end", action="store", dest="end", default=None, help="End date YYYY/MM/DD")
    parser.add_option("--path", action="store", dest="path", default="/var/ossim/logs",
                      help="Path to logger. Default /var/ossim/logs")
    parser.add_option("--debug", action="store_true", dest="debug", default=False, help="Print debug output")
    options, args = parser.parse_args()

    # Check the date
    try:
        if options.start:
            value = options.start
            datetime.strptime(options.start, "%Y/%m/%d")
        if options.end:
            value = options.end
            datetime.strptime(options.end, "%Y/%m/%d")
    except ValueError:
        sys.exit("Incorrect date: {}".format(value))
  
    if options.debug:
        print "Options:\n\t" + str(options)

    if not (options.start or options.end):
        parser.print_usage(file=sys.stderr)
        sys.exit(1)

    result, msg = delete_raw_logs("127.0.0.1", options.start, options.end, options.path)
    if not result:
        if options.debug:
            print msg
        # There are a error. Print 
        print >>sys.stderr, "Error: Can't delete all logs"
        print >>sys.stderr, "\tTotal directories deleted: %d" % len(msg.get('dirsdeleted', []))
        print >>sys.stderr, "\tTotal directories with errors: %d" % len(msg.get('dirserrors', []))
        print >>sys.stderr, "\tTotal Kbytes freed: %f" % (float(msg.get('totaldelete', 0))/1024)
        sys.exit(1)
    else:
        if options.debug:
            print msg
        print "Total directories deleted: %d" % len(msg.get('dirsdeleted', []))
        print "Total Kbytes freed: %f" % (float(msg.get('totaldelete', 0))/1024)
        sys.exit(0)


if __name__ == '__main__':
    logclean()
